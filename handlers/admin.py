import datetime
import time

from aiogram import types, Router, F
from aiogram.enums import ChatMemberStatus
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, Update
from aiogram.utils.keyboard import InlineKeyboardBuilder

from handlers.client_handlers import router
from utils.create_bot import job_stores, bot, _
from database.db_manage import get_user, update_user_sql, get_user_chats, get_chat_record, update_chat_sql, \
    create_group_channel
from keyboards.admin_kb import reject_to_admin_btn, back_to_admin_btn, back_to_group_manage_btn, \
    unblock_user_btn, block_user_btn, back_my_channels_groups, back_my_channels_groups_kb, \
    activate_ad_auction_kb, admin_menu_kb, create_subscription_group_buttons_kb
from keyboards.client_kb import main_kb
from utils.paypal import create_order, create_partner_referral_url_and_token, user_is_partner
from utils.utils import get_token_approval, payment_completed, \
    get_token_or_create_new


from handlers.middleware import subscription_group_required
from database.db_manage import get_chat_record, update_chat_sql


class FSMAdmin(StatesGroup):
    user_chat_id = State()
    group_id_settings = State()
    user_id = State()


async def admin(message: types.Message, state):
    await state.clear()
    if isinstance(message, types.Message):
        await message.answer(text='–ú–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_menu_kb.as_markup())
    elif isinstance(message, types.CallbackQuery):
        await message.message.edit_text(text='–ú–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞', reply_markup=admin_menu_kb.as_markup())


async def deny_user_access(call: types.CallbackQuery, state: FSMContext):
    await state.set_state(FSMAdmin.user_id)
    await call.message.edit_text(text='üëãüèª –í—ñ—Ç–∞—é!\n'
                                      '–ü–µ—Ä–µ—à–ª—ñ—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–±–æ <b>id</b> –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–ª—è –Ω–∞–¥–∞–Ω–Ω—è –∞–±–æ —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è –ø—Ä–∞–≤:',
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[reject_to_admin_btn]]))


async def user_access(message: types.Message, state: FSMContext):
    if isinstance(message, types.Message):
        if message.forward_from:
            user_id = message.forward_from.id
        else:
            user_id = message.text
        await state.update_data(black_user_id=user_id)
    else:
        fsm_data = await state.get_data()
        user_id = fsm_data.get('black_user_id')
    user = await get_user(user_id)

    if user:
        kb = InlineKeyboardMarkup(inline_keyboard=[])
        if user.is_blocked:
            unblock_user_btn.callback_data = unblock_user_btn.callback_data.format(user_id=user_id)
            kb.inline_keyboard.extend([[unblock_user_btn]])
            text = 'üö´ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.'
        else:
            block_user_btn.callback_data = block_user_btn.callback_data.format(user_id=user_id)
            kb.inline_keyboard.extend([[block_user_btn]])
            text = '‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–∏–π.'
        kb.inline_keyboard.extend([[back_to_admin_btn]])
        if isinstance(message, types.Message):
            await message.answer(text=text, reply_markup=kb)
        else:
            await message.message.edit_text(text=text, reply_markup=kb)
    else:
        await message.answer(text='‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º id –Ω–µ —ñ—Å–Ω—É—î.\n'
                                  '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:')


async def change_user_access(call: types.CallbackQuery, state: FSMContext):
    user_id, action = call.data.split('_')[1:3]
    if action == 'block':
        await update_user_sql(user_id, is_blocked=1)
    else:
        await update_user_sql(user_id, is_blocked=0)
    await user_access(call, state)
    return


async def payment_tumbler(call: types.CallbackQuery, state: FSMContext):
    redis_obj = job_stores.get('default')
    if call.data == 'off_payment':
        redis_obj.redis.set(name='payment', value='off')
    else:
        redis_obj.redis.set(name='payment', value='on')
    await admin(call, state)
    return


async def group_id_settings(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(group_id_settings=call.data)
    group = await get_chat_record(call.data)
    kb_builder = InlineKeyboardBuilder()
    kb_builder.add(
        InlineKeyboardButton(text='‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞—É–∫—Ü—ñ–æ–Ω', callback_data='1'),
        InlineKeyboardButton(text='‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–ª–∞—Ç–Ω—ñ –ª–æ—Ç–∏', callback_data='1'),
        InlineKeyboardButton(text='‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', callback_data='1'),
        InlineKeyboardButton(text='‚ùå –î–µ–∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –ø–ª–∞—Ç–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è', callback_data='1'),
    )
    kb_builder.add(back_to_group_manage_btn)
    kb_builder.adjust(1)
    await call.message.edit_text(text='–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏ {group}\n\n'
                                      'üü¢ –§—É–Ω–∫—Ü—ñ—è –∞—É–∫—Ü—ñ–æ–Ω—É –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞\n'
                                      'üü¢ –ü–ª–∞—Ç–Ω—ñ –ª–æ—Ç–∏ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ\n\n'
                                      'üü¢ –§—É–Ω–∫—Ü—ñ—è –æ–≥–æ–ª–æ—à–µ–Ω—å –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞\n'
                                      'üü¢ –ü–ª–∞—Ç–Ω—ñ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ\n'
                                 .format(group=group.chat_name),
                                 reply_markup=kb_builder.as_markup())
    # await call.message.edit_text()


async def add_group(call: types.CallbackQuery):
    me = await bot.get_me()
    await call.message.edit_text(text='–î–æ–¥–∞–π—Ç–µ –±–æ—Ç–∞ —É —Å–≤–æ—é –≥—Ä—É–ø—É, —Ç–∞ –Ω–∞–¥–∞–π—Ç–µ –π–æ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n'
                                      "–Ü–º'—è –±–æ—Ç–∞: @{bot_name}".format(bot_name=me.username),
                                 reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_to_admin_btn]]))


async def my_channels_groups(call: types.CallbackQuery, state: FSMContext):
    user_chats = await get_user_chats(call.from_user.id)
    kb = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton(text=chat.chat_name, callback_data=chat.chat_id)] for chat in
                         user_chats])
    kb.inline_keyboard.extend([[back_to_admin_btn]])
    await state.set_state(FSMAdmin.user_chat_id)
    await call.message.edit_text(text=_('–í–∞—à—ñ –≥—Ä—É–ø–∏/–∫–∞–Ω–∞–ª–∏.\n'
                                        '–©–æ–± –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ –∞–±–æ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞, –æ–±–µ—Ä—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É –≥—Ä—É–ø—É/–∫–∞–Ω–∞–ª:'),
                                 reply_markup=kb)


async def user_chat_menu(call: types.CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=_('–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏...'))
    user_chat_id = call.data.split(':')[0]
    chat = await get_chat_record(user_chat_id)
    adv_subscribe_time_remain, auction_subscribe_time_remain = chat.ads_sub_time, chat.auction_sub_time
    text = ('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è {ads_sub_date}\n'
            '–ê—É–∫—Ü—ñ–æ–Ω {auction_sub_date}')
    auction_token, ads_token = None, None
    if auction_subscribe_time_remain > time.time():
        auction_sub_date = f'–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {datetime.datetime.fromtimestamp(chat.auction_sub_time).strftime("%d.%m.%Y")}'
    else:
        auction_token_approved = await get_token_approval(chat, type_='auction')
        if auction_token_approved:
            auction_sub_date = f'–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {datetime.datetime.fromtimestamp(chat.auction_sub_time).strftime("%d.%m.%Y")}'
            await update_chat_sql(user_chat_id, auction_sub_time=604800 + time.time())
        else:
            auction_sub_date = '–Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
            auction_token = await get_token_or_create_new(chat.auction_token, user_chat_id, 'auction_token')
    if adv_subscribe_time_remain > time.time():
        ads_sub_date = f'–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {datetime.datetime.fromtimestamp(chat.ads_sub_time).strftime("%d.%m.%Y")}'
    else:
        ads_token_approved = await get_token_approval(chat, type_='ads')
        if ads_token_approved:
            ads_sub_date = f'–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –¥–æ {datetime.datetime.fromtimestamp(chat.ads_sub_time).strftime("%d.%m.%Y")}'
            await update_chat_sql(user_chat_id, ads_sub_time=604800 + time.time())
        else:
            ads_token = await get_token_or_create_new(chat.ads_token, user_chat_id, 'ads_token')
            ads_sub_date = '–Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ'
    text = text.format(auction_sub_date=auction_sub_date, ads_sub_date=ads_sub_date)

    kb = await activate_ad_auction_kb(auction_token=auction_token, ads_token=ads_token,
                                      back_btn=back_my_channels_groups, user_chat_id=user_chat_id)
    await bot.send_message(chat_id=call.from_user.id, text=text, reply_markup=kb)


async def update_bot_subscription_status(call, state: FSMContext):
    token = call.data.split('_')[-1]
    user_chat_id = call.data.split(':')[0]
    payment = await payment_completed(token)
    if payment:
        await update_chat_sql(user_chat_id, subscription_time=604800 + time.time())
        await call.message.edit_text(text=_('‚úÖ –í—ñ—Ç–∞—é! –ë–æ—Ç–∞ —É—Å–ø—ñ—à–Ω–æ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ 30 –¥–Ω—ñ–≤.'),
                                     reply_markup=main_kb)
    else:
        await user_chat_menu(call, state)
        return


@router.my_chat_member()
async def my_chat_member_handler(my_chat_member: types.ChatMemberUpdated):
    if my_chat_member.chat.type not in {'channel', 'group', 'supergroup'}:
        return

    user_id = my_chat_member.from_user.id
    chat_title = my_chat_member.chat.title
    new_status = my_chat_member.new_chat_member.status

    messages = {
        ChatMemberStatus.ADMINISTRATOR: _(
            "{title} —É—Å–ø—ñ—à–Ω–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!"
        ).format(title=chat_title),
        ChatMemberStatus.MEMBER: _(
            "–î–ª—è —Ç–æ–≥–æ, —â–æ–± –±–æ—Ç —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞–≤ —É –≥—Ä—É–ø—ñ {title}, –ø–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–¥–∞—Ç–∏ –π–æ–º—É –ø—Ä–∞–≤–∞ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        ).format(title=chat_title),
        ChatMemberStatus.RESTRICTED: _(
            "–ë–æ—Ç –Ω–µ –º–æ–∂–µ —Ñ—É–Ω–∫—Ü—ñ–æ–Ω—É–≤–∞—Ç–∏ —É –≥—Ä—É–ø—ñ {title}, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π."
        ).format(title=chat_title),
        ChatMemberStatus.LEFT: _(
            "–ë–æ—Ç –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –≥—Ä—É–ø–∏ {title}."
        ).format(title=chat_title),
        ChatMemberStatus.KICKED: _(
            "–ë–æ—Ç–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –∑ –≥—Ä—É–ø–∏ {title}."
        ).format(title=chat_title),
    }

    if new_status == ChatMemberStatus.ADMINISTRATOR:
        chat_link = await bot.export_chat_invite_link(chat_id=my_chat_member.chat.id)
        await bot.send_message(chat_id=user_id, text=messages[new_status])
        await create_group_channel(
            owner_telegram_id=user_id,
            chat_id=my_chat_member.chat.id,
            chat_type=my_chat_member.chat.type,
            chat_name=chat_title,
            chat_link=chat_link,
        )
        chat = await get_chat_record(my_chat_member.chat.id)
        is_active_free_trial = datetime.datetime.fromtimestamp(chat.free_trial) > datetime.datetime.now()

        if not is_active_free_trial and not chat.auction_paid and not chat.ads_paid:
            await bot.send_message( # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É —Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–æ–∫
                chat_id=user_id,
                text=_("–í–∏ –Ω–µ –º–∞—î—Ç–µ –∞–∫—Ç–∏–≤–Ω–∏—Ö –ø—ñ–¥–ø–∏—Å–æ–∫. –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –¥–ª—è –≥—Ä—É–ø–∏, —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –ø–æ—Ç—Ä—ñ–±–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π."),
                reply_markup=create_subscription_group_buttons_kb(chat.chat_id, is_trial=chat.free_trial == 0)
            )
            return None
        else:
            await bot.send_message( # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∞–∫—Ç–∏–≤–Ω—É –ø—ñ–¥–ø–∏—Å–∫—É
                chat_id=user_id,
                text=_("–ó–∞—Ä–∞–∑ —É –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ —Ç–∏–ø—É *{subscribe}* –¥–æ *{last_time_subscribe}*").format( # –ü—Ä–æ–±–Ω–∞, –∞—É–∫—Ü—ñ–æ–Ω, –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
                    subscribe=_('–ü—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥') if is_active_free_trial else _('–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞') if chat.auction_paid and chat.ads_paid else _('–ê—É–∫—Ü—ñ–æ–Ω') if chat.auction_paid else _('–û–≥–æ–ª–æ—à–µ–Ω–Ω—è'),
                    last_time_subscribe=datetime.datetime.fromtimestamp(
                        chat.free_trial if chat.free_trial else chat.auction_sub_time if chat.auction_paid else chat.ads_sub_time
                    ).strftime("%d.%m.%Y" if chat.free_trial else "%d.%m.%Y"),
                ),
                reply_markup=admin_menu_kb.as_markup()
            )
            return None

    elif new_status in messages:
        await bot.send_message(chat_id=user_id, text=messages[new_status])


async def handle_subscription_group(callback_query: types.CallbackQuery):
    """
    –û–±—Ä–æ–±–∫–∞ –ø—ñ–¥–ø–∏—Å–∫–∏ –Ω–∞ –≥—Ä—É–ø—É.
    """
    chat_id = callback_query.from_user.id

    current_time = time.time()

    group_id = callback_query.data.split('_')[-1]
    duration_days = int(callback_query.data.split('_')[-2])
    type_subscribe = callback_query.data.split('_')[-3]

    if type_subscribe == 'trial':
        chat_data = await get_chat_record(group_id)
        print(chat_data)
        if chat_data.free_trial > 0:
            await callback_query.message.edit_text(
                text=_("–ü—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –≤–∂–µ –±—É–ª–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–æ."),
                reply_markup=admin_menu_kb.as_markup()
            )
            return None
        await update_chat_sql(group_id, free_trial=duration_days * 86400 + current_time)
        await callback_query.message.edit_text(
            text=_("–ü—Ä–æ–±–Ω–∏–π –ø–µ—Ä—ñ–æ–¥ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –Ω–∞ {days} –¥–Ω—ñ–≤.").format(days=duration_days),
            reply_markup=admin_menu_kb.as_markup()
        )
    elif type_subscribe == 'auction':
        # TODO: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –ª–æ–≥—ñ–∫–∞ –æ–ø–ª–∞—Ç–∏. –ê —Ç–∞–∫–æ–∂ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π.
        await update_chat_sql(group_id, auction_sub_time=duration_days * 86400 + current_time, auction_paid=True)
        await callback_query.message.edit_text(
            text=_("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∞—É–∫—Ü—ñ–æ–Ω –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—ñ–≤.").format(days=duration_days),
            reply_markup=admin_menu_kb.as_markup()
        )

    elif type_subscribe == 'ads':
        # TODO: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –ª–æ–≥—ñ–∫–∞ –æ–ø–ª–∞—Ç–∏. –ê —Ç–∞–∫–æ–∂ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π.
        await update_chat_sql(group_id, ads_sub_time=duration_days * 86400 + current_time, ads_paid=True)
        await callback_query.message.edit_text(
            text=_("–ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—ñ–≤.").format(days=duration_days),
            reply_markup=admin_menu_kb.as_markup()
        )

    elif type_subscribe == 'universal':
        # TODO: –î–æ–¥–∞—Ç–∫–æ–≤–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—ñ–¥–ø–∏—Å–∫–∏ —Ç–∞ –ª–æ–≥—ñ–∫–∞ –æ–ø–ª–∞—Ç–∏. –ê —Ç–∞–∫–æ–∂ –ª–æ–≥—É–≤–∞–Ω–Ω—è –æ–ø–µ—Ä–∞—Ü—ñ–π.
        await update_chat_sql(
            group_id,
            auction_sub_time=duration_days * 86400 + current_time,
            ads_sub_time=duration_days * 86400 + current_time,
            ads_paid=True,
            auction_paid=True
        )
        await callback_query.message.edit_text(
            text=_("–£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∞ –ø—ñ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞ –Ω–∞ {days} –¥–Ω—ñ–≤.").format(days=duration_days),
            reply_markup=admin_menu_kb.as_markup()
        )


async def not_registered_partner(message: types.Message):
    referral_data = await create_partner_referral_url_and_token(message.from_user.id)
    reg_url = referral_data.get('url')
    await message.answer(text='–©–æ–± —Å—Ç–∞—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –≤ PayPal –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é\n'
                              '{reg_url}'.format(reg_url=reg_url),
                         reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_to_admin_btn]]))


async def monetization(call: types.CallbackQuery):
    is_partner = await user_is_partner(call.from_user.id)
    if is_partner:
        await call.message.edit_text(text='–í—ñ—Ç–∞—é, –≤–∏ –ø–∞—Ä—Ç–Ω–µ—Ä!',
                                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[back_to_admin_btn]]))
    else:
        referral_data = await create_partner_referral_url_and_token(call.from_user.id)
        # referral_data = await create_partner_referral_url_and_token('12312312')
        reg_url = referral_data.get('url')
        builder = InlineKeyboardBuilder()
        builder.button(text='–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ PayPal', url=reg_url)
        builder.add(back_to_admin_btn)
        builder.adjust(1)
        await call.message.edit_text(
            text="–©–æ–± —Å—Ç–∞—Ç–∏ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º –∑–∞—Ä–µ—î—Å—Ç—Ä—É–π—Ç–µ—Å—å –≤ PayPal –ø–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—é –∞–±–æ –ø—ñ–¥'—î–¥–Ω–∞–π—Ç–µ —ñ—Å–Ω—É—é—á–∏–π –∞–∫–∫–∞—É–Ω—Ç.\n"
                 "–ü—ñ—Å–ª—è –∞–∫—Ç–∏–≤–∞—Ü—ñ—ó –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.\n"
                 "<b><a href='{reg_url}'>–ê–∫—Ç–∏–≤—É–≤–∞—Ç–∏ PayPal</a></b>".format(reg_url=reg_url),
            reply_markup=builder.as_markup())


def register_admin_handlers(r: Router):
    r.message.register(admin, Command('admin'))
    r.message.register(not_registered_partner, Command('not_registered_partner'))
    r.callback_query.register(admin, F.data == 'admin')  # –ú–µ–Ω—é –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    r.callback_query.register(change_user_access, F.data.startswith('access'))  # –ë–ª–æ–∫—É–≤–∞–Ω–Ω—è/–†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    r.callback_query.register(my_channels_groups, F.data == 'my_channels_groups')  # –ü—É–Ω–∫—Ç –º–µ–Ω—é "–ú–æ—ó –≥—Ä—É–ø–∏/–∫–∞–Ω–∞–ª–∏"
    r.callback_query.register(deny_user_access, F.data == 'deny_user_access')  # –ß–æ—Ä–Ω–∏–π —Å–ø–∏—Å–æ–∫
    r.callback_query.register(payment_tumbler, F.data.endswith('_payment'))  # –í–∏–º–∫–Ω—É—Ç–∏/–£–≤—ñ–º–∫–Ω—É—Ç–∏ –æ–ø–ª–∞—Ç—É
    r.callback_query.register(handle_subscription_group, F.data.startswith("subscription_group"))  # –ü—ñ–¥–ø–∏—Å–∫–∞ –Ω–∞ –≥—Ä—É–ø—É
    r.callback_query.register(add_group, F.data == 'add_group')  # –ü—É–Ω–∫—Ç –º–µ–Ω—é "–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏ –≥—Ä—É–ø—É"
    r.callback_query.register(monetization, F.data == 'monetization')  # –ú–æ–Ω–µ—Ç–∏–∑–∞—Ü—ñ—è
    r.callback_query.register(group_id_settings, FSMAdmin.group_id_settings)  # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –≥—Ä—É–ø–∏
    r.callback_query.register(user_chat_menu, FSMAdmin.user_chat_id)
    r.callback_query.register(update_bot_subscription_status, F.data.endswith('sub_update'))
    r.message.register(user_access, FSMAdmin.user_id)
